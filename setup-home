#!/bin/sh
#
#  Script to setup the symbolic links for configuration files for using
#  FreeBSD on a computer
#
# Add to "Files" section of your x.org configuration file:
#  FontPath "/usr/local/share/fonts/Carlito/"
#  FontPath "/usr/local/share/fonts/Liberation/"
#  FontPath "/usr/local/share/fonts/GentiumBasic/"
#  FontPath "/usr/local/share/fonts/LinLibertineG/"
#  FontPath "/usr/local/share/fonts/Caladea/"
#
# Add to "Modules" section of xorg.conf:
#
#	Load "freetype"
#
# location of configuration and setup files - obtained from Git repo
# and put in place by the 'Install-FreeBSD-10.3' script run before this one
GENIFILES='/home/simon/GenIsys-FreeBSD'
#
#
#  command line checking: if [ $HOSTNAME == blumoons ] ; then printf "yes\n" ; else printf "no\n" ; fi
#
printf "\nHOME DIRECTORY CONFIGURATION SCRIPT\n\nRunning with following details\n\n"
printf "\tScript: '%s'\n\tHostname:'%s'\n\tOS: '%s'\n\tUser '%s'\n" \
            "$0" "$HOSTNAME" "$(uname)" "$(whoami)"

# check if we are NOT root
if [ $(whoami) == "root" ] ; then
	printf "\n\nERROR: please login as your normal user and then re-run this script\n\n"
	exit
else
	printf "\nOK - Script is running as '$USER'\n"
fi
# sleep so user gets a chnage to read the above output
sleep 1

# Check that $GENIFILES is pointing to a location that exists....
if [ ! -d $GENIFILES ] ; then
    printf "ERROR: location '$GENIFILES' does not exist - please correct and re-run\n"
    exit
fi

printf "\nLINKING & CREATING DIRECTORIES\n\n"
printf "linking '~/Downloads' to '/datastore/SyncData/Downloads'...\n"
if [ -d /datastore/SyncData/Downloads ] && \
   [ ! -L /home/simon/Downloads ] && \
   [ ! -d /home/simon/Downloads ] ; then
	ln -s /datastore/SyncData/Downloads ~/Downloads
	echo "        DONE"
else
	echo "        Link ~/Downloads already exists - skipping"
fi

echo "Linking ~/Pictures/Photos to /datastore/Photos ..."
if [ -d /datastore/Photos ] && \
   [ -d ~/Pictures ] && \
   [ ! -L ~/Pictures/Photos ] ; then
	ln -s /datastore/Photos ~/Pictures/Photos
	echo "        DONE"
else
	echo "        Link ~/Pictures/Photos to /datastore/Photos already exists - skipping"
fi

echo "Linking ~/Work to /datastore/Work ..."
if [ -d /datastore/Work ] && \
   [ ! -L ~/Work ] && \
   [ ! -d ~/Work ] ; then
	ln -s /datastore/Work ~/Work
	echo "        DONE"
elif [ ! -d /datastore/Work ] ; then
	echo "        Warning: no '/datastore/Work' found - skipping"
else
	echo "        Link ~/Work already exists - skipping"
fi

echo "Creating ~/.unison..."
if [ ! -d ~/.unison ] && \
   [ ! -L ~/.unison ] ; then
	mkdir ~/.unison
	echo "        DONE"
else
	echo "        ~/.unison already exists - skipping"
fi
#
########################################################
# Check and setup the default shell to:  mksh
########################################################
# below assumes we want to use mksh as our default shell!
echo ""
echo "SHELL SETUP"
echo ""
echo "Checking that current setup shell is: mksh"
#
# check we are setup to use mksh - if not change - if available on the system
if [ ! $SHELL == "/usr/local/bin/mksh" ] && \
   [ -x /usr/local/bin/mksh ]; then
        # not using mksh but it is installed on the system - so use it
        read -p "        Switch login shell to 'mksh' for '$USER'?  y/n " -t 10 -re REPLY
        if [ $REPLY == y ] || [ $REPLY == Y ] ; then
            /usr/bin/chpass -s /usr/local/bin/mksh simon
            if [ $(grep -ic "$USER:/usr/local/bin/mksh" /etc/passwd ) -gt 0 ] ; then
                printf "        Shell switch command successful!\n"
            else
                printf "        ERROR: Shell switch command failed\n"
            fi
        else
	        printf "\n        No shell change made at user's request\n"
        fi
else
	echo "        'mksh' is already the login shell for '$USER' - skipping"
fi
#
# sleep so user gets a chnage to read the above output
sleep 1
echo ""
echo "LINKING & CREATING FILES"
echo ""
echo "Setup config files for: mksh"
# If users shell in /etc/passwd is 'mksh' shell - setup profile to match
if [ $(grep -ic "$USER:/usr/local/bin/mksh" /etc/passwd ) -gt 0 ] ; then
    #
	# if exists a ~.profile that is not a symbolic link - move it as backup
	if [ -f ~/.profile ] && [ ! -L ~/.profile ] ; then
		printf "existing ~/.profile found - backing up...\n"
		mv ~/.profile ~/.profile-orig-$(date -d "today" +"%Y-%m-%d_%H.%M")
	fi
	# if there is no .profile and no symbolic link to one - create it
    	if [ ! -f ~/.profile ] && \
	   [ ! -L ~/.profile ] && \
	   [ -f $GENIFILES/configs/profile ] ; then
		echo "Linking to new '.profile' in '$GENIFILES'"
		ln -s $GENIFILES/configs/profile ~/.profile
		echo "        DONE"
	else
		echo "        ~/.profile already exists - skipping"
	fi
	# also set up bash_aliases too
	if [ ! -f ~/.mksh_aliases ] && \
	   [ ! -L ~/.mksh_aliases ] && \
	   [ -f $GENIFILES/configs/mksh_aliases ] ; then
		echo "Linking .mksh_aliases..."
		ln -s $GENIFILES/configs/mksh_aliases ~/.mksh_aliases
		echo "        DONE"
	else
		echo "        ~/.mksh_aliases already exists - skipping"
	fi
fi

# add custom red coloured prompt to root .bashrc
# PS1='${chroot_env:+($chroot_env)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \# '

# Gimp Keyboard shortcuts:
echo "Setup config files for: Gimp"
# file exists too :
if [ -f ~/.gimp-2.8/menurc ] && \
   [! -L ~/.gimp-2.8/menurc ] && \
   [ -f $GENIFILES/configs/gimp-menurc ] ; then
	echo "File: ~/.gimp-2.8/menurc found - backing up..."
	mv ~/.gimp-2.8/menurc ~/.gimp-2.8/menurc-orig-$(date -d "today" +"%Y-%m-%d_%H.%M")
	echo "Linking to new Gimp .menurc in MoonStore"
	ln -s $GENIFILES/configs/gimp-menurc ~/.gimp-2.8/menurc
	echo "        DONE"
else
	echo "        ~/.gimp-2.8/menurc already exists - skipping"
fi

echo "Setting up other misc program files..."
# if there is not already a .screenrc_aliases as a file or symbolic link
if [ ! -f ~/.screenrc ] && \
   [ ! -L ~/.screenrc ] && \
   [ -f $GENIFILES/configs/screenrc ] ; then
	echo "Linking .screenrc..."
	ln -s $GENIFILES/configs/screenrc ~/.screenrc
	echo "        DONE"
else
	echo "        ~/.screenrc already exists - skipping"
fi

# if there is not already a .nanorc as a file or symbolic link
if [ ! -f ~/.nanorc ] && \
   [ ! -L ~/.nanorc ] && \
   [ -f $GENIFILES/configs/nanorc ] ; then
	echo "Linking .nanorc..."
	ln -s $GENIFILES/configs/nanorc ~/.nanorc
	echo "        DONE"
else
	echo "        ~/.nanorc already exists - skipping"
fi

# if there is not already a .fonts.conf as a file or symbolic link
if [ ! -f ~/.fonts.conf ] && \
   [ ! -L ~/.fonts.conf ] && \
   [ -f $GENIFILES/configs/fonts.conf ] ; then
	echo "Linking .fonts.conf..."
	ln -s $GENIFILES/configs/fonts.conf ~/.fonts.conf
	echo "        DONE"
else
	echo "        ~/.fonts.conf already exists - skipping"
fi

# if there is no .gitconfig as a file or symbolic link
if [ ! -f ~/.gitconfig ] && \
   [ ! -L ~/.gitconfig ] && \
   [ -f $GENIFILES/configs/gitconfig ] ; then
	echo "Linking .gitconfig..."
	ln -s $GENIFILES/configs/gitconfig ~/.gitconfig
	echo "        DONE"
else
	echo "        ~/.gitconfig already exists - skipping"
fi

# BLUMOONS: if there is not already a .conkyrc as a file or symbolic link
if [ ! -f ~/.conkyrc ] && \
   [ ! -L ~/.conkyrc ] && \
   [ -f $GENIFILES/configs/conkyrc-blumoons ] && \
   [ $HOSTNAME == blumoons ] ; then
	echo "Linking .conkyrc (BLUMOONS)..."
	ln -s $GENIFILES/configs/conkyrc-blumoons ~/.conkyrc
	echo "        DONE"
else
	echo "        ~/.conkyrc (BLUMOONS) already exists - skipping"
fi

# SERVER: if there is not already a .conkyrc as a file or symbolic link -
if [ ! -f ~/.conkyrc ] && \
   [ ! -L ~/.conkyrc ] && \
   [ -f $GENIFILES/configs/conkyrc-server ] && \
   [ $HOSTNAME == server ] ; then
	echo "Linking .conkyrc (SERVER)..."
	ln -s $GENIFILES/configs/conkyrc-server ~/.conkyrc
	echo "        DONE"
else
	echo "        ~/.conkyrc (SERVER) already exists - skipping"
fi

#~/.config/gtk-3.0/settings.ini
#[Settings]
#gtk-application-prefer-dark-theme=1


########################################################
# Add support for Vim editor and for Vim Golang support
########################################################
#
echo "Setup config files for: Vim"
# only run if vim is installed in: /usr/local/bin/vim
if [ -x /usr/local/bin/vim ] ; then
      if [ ! -f ~/.vimrc ] && \
         [ ! -L ~/.vimrc ] && \
         [ -f $GENIFILES/configs/vimrc ] ; then
      	echo "Linking .vimrc..."
              ln -s $GENIFILES/configs/vimrc ~/.vimrc
      	echo "        DONE"
      else
      	echo "        ~/.vimrc already exists - skipping"
      fi

      if [ ! -d ~/.vim/ftdect ] ; then
          mkdir -p ~/.vim/ftdetect
          echo "        Created directory: ~/.vim/ftdect"
      fi
      if [ ! -d ~/.vim/syntax ] ; then
          mkdir -p ~/.vim/syntax
          echo "        Created directory: ~/.vim/syntax"
      fi
      if [ ! -d ~/.vim/autoload/go ] ; then
          mkdir -p ~/.vim/autoload/go
          echo "        Created directory: ~/.vim/autoload/go"
      fi
      # add directory to add vim bundles too
      if [ ! -d ~/.vim/bundle ] ; then
          mkdir -p ~/.vim/bundle
          echo "        Created directory: ~/.vim/bundle"
      fi
      #
      # link files into new '~/vim/' directory created above
      if [ ! -f ~/.vim/ftdetect/gofiletype.vim ] && \
         [ ! -L ~/.vim/ftdetect/gofiletype.vim ] && \
         [ -f $GOROOT/misc/vim/ftdetect/gofiletype.vim ] ; then
          ln -s $GOROOT/misc/vim/ftdetect/gofiletype.vim ~/.vim/ftdetect/
          echo "        Added symbolic link to $GOROOT/misc/vim/ftdetect/gofiletype.vim"
      else
          echo "        Symbolic link to $GOROOT/misc/vim/ftdetect/gofiletype.vim already exists - skipping"
      fi

      if [ ! -f ~/.vim/syntax/go.vim ] && \
         [ ! -L ~/.vim/syntax/go.vim ] && \
         [ -f $GOROOT/misc/vim/syntax/go.vim ] ; then
          ln -s $GOROOT/misc/vim/syntax/go.vim ~/.vim/syntax
          echo "        Added symbolic link to $GOROOT/misc/vim/syntax/go.vim"
      else
          echo "        Symbolic link to $GOROOT/misc/vim/syntax/go.vim already exists - skipping"
      fi

      if [ ! -f ~/.vim/autoload/go/complete.vim ] && \
         [ ! -L ~/.vim/autoload/go/complete.vim ] && \
         [ -f $GOROOT/misc/vim/autoload/go/complete.vim ] ; then
          ln -s $GOROOT/misc/vim/autoload/go/complete.vim ~/.vim/autoload/go
          echo "        Added symbolic link to $GOROOT/misc/vim/autoload/go/complete.vim"
      else
          echo "        Symbolic link to $GOROOT/misc/vim/autoload/go/complete.vim already exists - skipping"
      fi
      # Install 'Pathogen' support for packagement in Vim
      #  - see: https://github.com/tpope/vim-pathogen
      if [ ! -f ~/.vim/autoload/pathogen.vim ] ; then
          wget https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim -P ~/.vim/autoload/
          echo "        Installing Pathogen in ~/.vim/autoload/pathogen.vim"
      else
          echo "        Vim Pathogen support installed already - skipping"
      fi
      # add vim Git support using pluggin vim-fugitive - require 'Pathogen' package manager
      if [ -d ~/.vim/bundle ] && \
         [ ! -d ~/.vim/bundle/vim-fugitive ] && \
         [ -f ~/.vim/autoload/pathogen.vim ] ; then
          cd ~/.vim/bundle
          git clone git://github.com/tpope/vim-fugitive.git
          vim -u NONE -c "helptags vim-fugitive/doc" -c q
          echo "        Installed vim fugitive - Git support"
      else
          echo "        Fugitive Git support installed for vim already - skipping"
      fi
else
	echo "Vim is not installed - skipping"
fi

#########################################################
# add support for jed
########################################################

# add jed startup file to home directory: ~/.jedrc
echo "Setup config files for: jed"
# only run of Jed is installed in: /usr/bin/jed
if [ -x /usr/local/bin/jed ] ; then
      if [ ! -f ~/.jedrc ] && \
         [ ! -L ~/.jedrc ] && \
         [ -f $GENIFILES/configs/jedrc ] ; then
          ln -s $GENIFILES/configs/jedrc ~/.jedrc
          echo "        Added symbolic link to $GENIFILES/configs/jedrc"
      else
          echo "        ~/.jedrc already exists - skipping"
      fi
else
	echo "        Jed is not installed - skipping"
fi

#########################################################
# add support for emacs
########################################################

echo "Setup config files for: emacs"
# only run if emacs is installed in: /usr/bin/emacs
if [ -x /usr/local/bin/emacs ] ; then
      if [ ! -f ~/.abbrev_defs ] && \
         [ ! -L ~/.abbrev_defs ] && \
         [ -f $GENIFILES/configs/abbrev_defs ] ; then
          ln -s $GENIFILES/configs/abbrev_defs ~/.abbrev_defs
          echo "      Added symbolic link to $GENIFILES/configs/abbrev_defs"
      else
          echo "      ~/.abbrev_defs already exists - skipping"
      fi

      if [ ! -f ~/.aspell.en.pws ] && \
         [ ! -L ~/.aspell.en.pws ] && \
         [ -f $GENIFILES/configs/aspell.en.pws ] ; then
          ln -s $GENIFILES/configs/aspell.en.pws ~/.aspell.en.pws
          echo "      Added symbolic link to $GENIFILES/configs/aspell.en.pws"
      else
          echo "      ~/.aspell.en.pws already exists - skipping"
      fi

      if [ ! -f ~/.aspell.en.prepl ] && \
         [ ! -L ~/.aspell.en.prepl ] && \
         [ -f $GENIFILES/configs/aspell.en.prepl ] ; then
          ln -s $GENIFILES/configs/aspell.en.prepl ~/.aspell.en.prepl
          echo "      Added symbolic link to $GENIFILES/configs/aspell.en.prepl"
      else
          echo "      ~/.aspell.en.prepl already exists - skipping"
      fi

      if [ ! -f ~/.emacs ] && \
         [ ! -L ~/.emacs ] && \
         [ -f $GENIFILES/configs/emacs ] ; then
          ln -s $GENIFILES/configs/emacs ~/.emacs
          echo "      Added symbolic link to $GENIFILES/configs/emacs"
      else
          echo "      ~/.emacs already exists - skipping"
      fi
else
	echo "        Emacs not installed - skipping"
fi



