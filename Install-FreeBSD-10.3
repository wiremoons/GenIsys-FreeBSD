#!/bin/sh
#
#	Installation Script for FreeBSD
#
#  Created on: 28 May 2016 by Simon Rowe
#
printf "\n\n        FreeBSD Installation Script for Release 10.3\n"
printf "        --------------------------------------------\n\n\n"
printf "This script can be run to assist in the initial setup and configuration\n"
printf "of a FreeBSD 10.3 system. The script needs to be run as the super user\n"
printf "'root' in order to function correctly.\n"
# check if we are root?
if [ $(whoami) != "root" ] ; then
	printf "\n\nERROR: please login as root and then re-run this script\n\n"
	exit
else
	printf "\nOK - Script is running with required privilages\n"
fi
#
# suggest the user creates a snapshot first if running on a ZFS file system
#
printf "\n\nSNAPSHOT CURRENT INSTALL WITH ZFS\n\n"
printf "Suggested commands to run to snapshot your boot and system areas are:\n\n"
printf "    zfs snapshot -r zroot@FreshInstall-$(date +%Y%b%d_%H%M%S)\n"
printf "    zfs snapshot -r bootpool@FreshInstall-$(date +%Y%b%d_%H%M%S)\n"
printf "\n"
#
# TODO: check for pools and then only do snapshot if they exist
# TODO: make sure ZFS is being used before trying to snapshot
#
read -p "Do you want to create the suggest snapshots y/n " -t 10s -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
	zfs snapshot -r zroot@FreshInstall-$(date +%Y%b%d_%H%M%S)
	zfs snapshot -r bootpool@FreshInstall-$(date +%Y%b%d_%H%M%S)
	printf "ZFS snapshots created - snapshots on the file systems are:\n"
	zfs list -t snapshot
	printf "\nDONE\n"
else
	printf "\nNo ZFS snapshots created at user's request\n"
fi
sleep 2
#
# update the packaging system
#
printf "\n\nPACKAGE MANAGEMENT CONFIGURATION\n\n"
printf "\nChecking for binary package management system...\n"
# see if pkg is installed?
if [ $(pkg -N) ] ; then
    printf "OK - FreeBSD 'pkg' is installed\n"
else
    printf "FreeBSD 'pkg' tool needs installation...\n"
    pkg bootstrap
fi
sleep 2
#
# apply and FreeBSD system updates to the computer
#
printf "\nUpdating 'pkg' packages database...\n"
pkg upgrade
#make sure any other packages installed by older tools are registered with pkg 
pkg2ng
sleep 2
#
# Download and then install any FreeBSD system updates for our Release
#
printf "\n\nUPDATE THE FREEBSD SYSTEM\n\n"
printf "\nChecking for and installing any FreeBSD updates...\n"
freebsd-update fetch
freebsd-update install
#
# add new command line packages to the system
#
printf "\n\nINSTALL NEW COMMAND LINE SOFTWARE\n\n"
printf "\nInstalling new command line tools...\n"
pkg install sudo mksh nano avahi nss_mdns git curl rsync screen \
cmdwatch vim mp4v2 tree pv beadm aspell en-aspell p7zip
sleep 2
#
# install XWindows with Nvidia drivers
#
printf "\n\nINSTALL XWINDOWS SYSTEMS AND DRIVERS\n\n"
printf "\nInstalling Nvidia graphics card drivers and XWindows Desktop...\n"
read -p "Do you want to install these items y/n " -t 10 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
	pkg install nvidia-driver nvidia-xconfig nvidia-settings chromium \
	vlc i3 i3lock i3status compton slim xorg 
	sleep 2
	#
	# configure the new system settings
	#
	# set 'nvidia_load="YES"' in '/boot/loader.conf'  kern.vty=vt
	sysrc -f /boot/loader.conf nvidia_load=YES
	if [ "nvidia_load=\"YES\"" == $(sysrc -e -f /boot/loader.conf nvidia_load) ] ; then
		printf "'nvidia_load' set\n"
	else
		printf "ERROR: should match: nvidia_load=\"YES\" == %s\n" \
			$(sysrc -e -f /boot/loader.conf nvidia_load)
	fi	
	#
	# set 'hald_enable="YES" in '/etc/rc.conf'
	sysrc -f /etc/rc.conf hald_enable=YES
	if [ "hald_enable=\"YES\"" == $(sysrc -e -f /etc/rc.conf hald_enable) ] ; then
		printf "'hald_enable' set\n"
	else
		printf "ERROR: should match: hald_enable=\"YES\" == %s\n" \
			$(sysrc -e -f /etc/rc.conf hald_enable)
	fi
	#
	# set 'slim_enable="YES" in '/etc/rc.conf'
	sysrc -f /etc/rc.conf slim_enable=YES
	if [ "slim_enable=\"YES\"" == $(sysrc -e -f /etc/rc.conf slim_enable) ] ; then
		printf "'slim_enable' set\n"
	else
		printf "ERROR: should match: slim_enable=\"YES\" == %s\n" \
			$(sysrc -e -f /etc/rc.conf slim_enable)
	fi
	# set 'dbus_enable="YES" in '/etc/rc.conf'
	sysrc -f /etc/rc.conf dbus_enable=YES
	if [ "dbus_enable=\"YES\"" == $(sysrc -e -f /etc/rc.conf dbus_enable) ] ; then
		printf "'dbus_enable' set\n"
	else
		printf "ERROR: should match: dbus_enable=\"YES\" == %s\n" \
			$(sysrc -e -f /etc/rc.conf dbus_enable)
	fi
	#
	# FreeBSD Handbook states this may not load correctly - but may load adaquatly
	# to allow support the creation of the 'xorg.conf' file in /etc/X11/ ?
	kldload nvidia
	# generate a 'xorg.conf' file and add features to it
	nvidia-xconfig
	nvidia-xconfig --add-argb-glx-visuals
	nvidia-xconfig --composite
	#
	#  TODO
	#  copy from config dir the xinitrc to ~/.xinitrc so i3 starts with compton etc 
fi
#
# install 'server' xwindows minimal setup to use Chromium web browser
#
printf "\n\nINSTALL XWINDOWS SYSTEMS AND DRIVERS - 'SERVER'\n\n"
printf "\nInstalling Frame Buffer graphics card drivers and Chromium...\n"
read -p "Do you want to install these items y/n " -t 10 -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
	pkg install xf86-video-scfb chromium xorg xdm
	sleep 2
	#
	# configure the new system settings
	#
	# TODO
	# set 'xinitirc-server' from config files to .xinitrc so startx runs chromium in full screen
	#if [ "nvidia_load=\"YES\"" == $(sysrc -e -f /boot/loader.conf nvidia_load) ] ; then
	#	printf "'nvidia_load' set\n"
	#else
	#	printf "ERROR: should match: nvidia_load=\"YES\" == %s\n" $(sysrc -e -f /boot/loader.conf nvidia_load)
	#fi	
	#
	#  TODO
	# add the following to: '/usr/local/etc/X11/xorg.conf.d/driver-scfb.conf
	#  copy of file 'driver-scfb.conf' is in config dir - so copy into place??
	#
	# set 'hald_enable="YES" in '/etc/rc.conf' - used to auto detect hardware 
	# changes for Xwindows - so not sure if actually required in this setup...
	sysrc -f /etc/rc.conf hald_enable=YES
	if [ "hald_enable=\"YES\"" == $(sysrc -e -f /etc/rc.conf hald_enable) ] ; then
		printf "'hald_enable' set\n"
	else
		printf "ERROR: should match: hald_enable=\"YES\" == %s\n" $(sysrc -e -f /etc/rc.conf hald_enable)
	fi
	# set 'dbus_enable="YES" in '/etc/rc.conf'
	sysrc -f /etc/rc.conf dbus_enable=YES
	if [ "dbus_enable=\"YES\"" == $(sysrc -e -f /etc/rc.conf dbus_enable) ] ; then
		printf "'dbus_enable' set\n"
	else
		printf "ERROR: should match: dbus_enable=\"YES\" == %s\n" $(sysrc -e -f /etc/rc.conf dbus_enable)
	fi
fi
#
# install updates to configuration files
#
printf "\n\nUPDATE SYSTEM CONFIGURATION FILES\n\n"
#
# check for 'kern.ipc.shm_allow_removed=1' in '/etc/sysctl.conf'
if [ $(grep -ic "kern.ipc.shm_allow_removed=1" /etc/sysctl.conf ) -gt 0 ] ; then
	printf "\nFile: /etc/sysctl.conf has 'kern.ipc.shm_allow_removed=1' entry already...    SKIPPING\n"
else
	printf "\nNo 'kern.ipc.shm_allow_removed=1' entry found - adding to /etc/sysctl.conf... "
	printf "kern.ipc.shm_allow_removed=1\n" >> /etc/sysctl.conf
	printf "DONE\n"
fi
#
# check for 'vfs.zfs.min_auto_ashift=12' in '/etc/sysctl.conf'
if [ $(grep -ic "vfs.zfs.min_auto_ashift=12" /etc/sysctl.conf ) -gt 0 ] ; then
	printf "\nFile: /etc/sysctl.conf has 'vfs.zfs.min_auto_ashift=12' entry already...    SKIPPING\n"
else
	printf "\nNo 'kvfs.zfs.min_auto_ashift=12' entry found - adding to /etc/sysctl.conf... "
	printf "vfs.zfs.min_auto_ashift=12\n" >> /etc/sysctl.conf
	printf "DONE\n"
fi
#
# set 'avahi_daemon_enable="YES" in '/etc/rc.conf'
sysrc -f /etc/rc.conf avahi_daemon_enable=YES
if [ "avahi_daemon_enable=\"YES\"" == $(sysrc -e -f /etc/rc.conf avahi_daemon_enable) ] ; then
	printf "'avahi_daemon_enable' set\n"
else
	printf "ERROR: should match: avahi_daemon_enable=\"YES\" == %s\n" \
		$(sysrc -e -f /etc/rc.conf avahi_daemon_enable)
fi
#
# set 'kern.vty=vt' in '/boot/loader.conf'  
if [ $(grep -ic "kern.vty=vt" /boot/loader.conf ) -gt 0 ] ; then
	printf "\nFile: /boot/loader.conf has 'kern.vty=vt' entry already...    SKIPPING\n"
else
	printf "\nNo 'kern.vty=vt' entry found - adding to /boot/loader.conf... "
	printf "kern.vty=vt\n" >> /boot/loader.conf
	printf "DONE\n"
fi
#
# install
#
printf "Manual items to edit\n"
# check if need to add setting in support of package 'nss_mdns'
if [ ! $(grep -ic "files mdns dns" /etc/nsswitch.conf ) -gt 0 ] ; then 
	printf "file '/etc/nsnswitch has 'mdns' ...    SKIPPING\n"
else
	printf "\nedit '/etc/nsswitch.conf' --> change 'hosts: files dns'  to  'hosts: files mdns dns'\n"
fi
#
# todo: add /etc/ssh/sshd_conf - root login permit and issue.net banner
# server - add dhcpd config and daemon
# server - add sshguard with
#sshguard_enable="YES"
#sshguard_safety_thresh="30"
#sshguard_pardon_min_interval="600"
#sshguard_prescribe_interval="7200"
# or run from 'etc/syslog.conf' with line:
#auth.info;authpriv.info |exec /usr/local/sbin/sshguard -a 3 -p 9200 -s 12000
# enable IPFW:
# add to /etc/rc.conf
#firewall_enable="YES"
#firewall_quiet="YES"
#firewall_type="workstation"
#firewall_myservices="22"
#firewall_allowservices="any"
#firewall_logdeny="YES"
#
# add to sysctl.conf
# net.inet.ip.fw.verbose_limit=5
#
#
# Check and then install the firewall if required by the user
read -p "Do you want to configure and use the IPFW FreeBSD firewall  y/n " -t 10s -re REPLY
if [ $REPLY == y ] || [ $REPLY == Y ] ; then
        #zfs snapshot -r zroot@FreshInstall-$(date +%Y%b%d_%H%M%S)
        #zfs snapshot -r bootpool@FreshInstall-$(date +%Y%b%d_%H%M%S)
        printf "ZFS snapshots created - snapshots on the file systems are:\n"
        #zfs list -t snapshot
        printf "\nDONE\n"
else
        printf "\nNo ZFS snapshots created at user's request\n"
fi
sleep 2


